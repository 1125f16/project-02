While there are many existing technologies to interface and control smart lights lights (such as Phillips Hue lights), they often require user input to turn on/off the lights.  We will develop a system capable of automatically turning various lighting zones on and off as a user walks between the rooms of their home.


There are several existing technologies and accompanying applications for potentially handling this, namely physical sensors (motion, door), and "geofencing". Physical sensors offer a good amount of functionality but are limited to a narrow set of use cases. For instance, motion sensors may turn off the lights in a room where people are sitting still while watching TV or a movie, or may turn on lights frequently if a dog or cat is present in the home and wanders between rooms. Additionally, motion sensors or door sensors may not work well in large open floorplan rooms that are increasingly popular in homes these days, where multiple lighting zones may be desired. For example, many homes have kitchens, dining rooms, and TV rooms all combined into one large space, yet many users may not want to have every kitchen light on while watching TV. Also problematic is that physical sensors usually need to be plugged into a wall socket which may severely limit where they can be installed.


Another existing option is geofencing, wherein lighting can be controlled by the GPS location of a person's phone. This technology works well for coarse grained control (e.g., turning on all lights when arriving home for the day) but cannot reliably distinguish a users' location within a house. GPS is only accurate to about 6 feet, and can be useless inside of homes or apartment buildings. It would also have difficulty determining which floor of a home the user was on. Geofencing therefore would be very difficult or impossible to use to turn specific lighting zones on and off as a user walks between the rooms of their home.


To remedy this, we propose a new strategy wherein cheap, low energy bluetooth iBeacons are deployed in the various rooms or zones of a user's home. The user then installs an app on their phone, which interfaces with the phone's operating system to request to be notified about the distance to various iBeacons that are within range of the phone. This application can then use this information to relay messages regarding which iBeacons the user is near to a server running on the user's local wifi network. The server can then handle information from multiple users, determining what room each user is located in based on their iBeacon information, and then decide to turn on and off specific devices. The server accomplishes this by sending direct messages to the Philips Hue Bridge device that is also on the local wifi network.


Overall, the benefit to this strategy compared to existing ones is that a user can lay down as many iBeacons as they like in order to offer fine grained location control over their home lighting systems. iBeacons can potentially allow for identification of not only specific rooms within a home, but specific areas within a room. iBeacons are also very cheap (~$15), and operate on low energy bluetooth which allows them to be powered for many months on only a coin sized battery, or for longer using larger batteries or wall sockets. Ultimately, this approach allows for great flexibility in installation as well as high accuracy and low cost.


Specific Technologies and Packages Used:

Client: For the purposes of simplicity for this project, we will focus on deploying the client application on iPhone only. The app will be written in Swift using the Xcode IDE, and will interface with the iOS iBeacon API to request that iOS notify the application regarding iBeacon signals. The client will then notify the server of updates to the user's closest iBeacons using HTTP requests.  The App will allow specification of the userâ€™s current requested lighting level.

Server: The server will be deployed on a Tessel2 microcontroller which will sit on the user's wifi network and continuously monitor for incoming messages from the client. It will keep a state of the system and will be capable of handling multiple users in a home and what their lighting preferences are. The server code will be written in Node.js, using the http package for receiving messages as well as the HueJay package for interfacing with the Philips Hue Bridge to control user lights. While communication with the Hue Bridge could be done directly from the phone app, this would not allow for reconciling the locations of multiple users within a home, which necessitates the use of a server device on the network or a cloud interface. For our purposes, we feel the use of a local microcontroller server to be a cheap, reliable, and secure solution.

iBeacons: We will use several low cost iBeacons for development purposes.  In addition, any iOS device can be turned into an iBeacon.
